Microsoft (R) Macro Assembler Version 14.28.29335.0	    02/28/21 19:48:02
<Generating Sorting Counting Random Integers    (RandomInteg  Page 1 - 1


				TITLE Generating Sorting Counting Random Integers    (RandomIntegers.asm)

				; Author: Shimey Loo
				; Last Modified: February 28, 2021
				; OSU email address: LOOSH@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: Project 5       Due Date:  February 28, 2021
				; Description:


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

 = 0000000A				LO = 10
 = 00000063				HI = 99
 = 000000C8				ARRAYSIZE = 200
 = 0000005A				COUNTARRAYSIZE = HI - LO + 1
 = 00000059				COUNTINSTANCES = HI - LO


 00000000			.data

 00000000 47 65 6E 65 72	    intro_1	 	    BYTE   "Generating, Sorting, and Counting Random integers! Programmed by Shimey Loo", 0
	   61 74 69 6E 67
	   2C 20 53 6F 72
	   74 69 6E 67 2C
	   20 61 6E 64 20
	   43 6F 75 6E 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 69 6E 74 65
	   67 65 72 73 21
	   20 50 72 6F 67
	   72 61 6D 6D 65
	   64 20 62 79 20
	   53 68 69 6D 65
	   79 20 4C 6F 6F
	   00
 0000004C 54 68 69 73 20		intro_2	 	    BYTE   "This program generates a list of random numbers in a specific range, displays the", 13, 10,
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 61 20
	   6C 69 73 74 20
	   6F 66 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 61 20 73 70
	   65 63 69 66 69
	   63 20 72 61 6E
	   67 65 2C 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 0D 0A 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6D 65 64
	   69 61 6E 20 76
	   61 6C 75 65 20
	   6F 66 20 74 68
	   65 20 6C 69 73
	   74 2C 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 0D 0A 6C 69
	   73 74 20 73 6F
	   72 74 65 64 20
	   69 6E 20 61 73
	   63 65 6E 64 69
	   6E 67 20 6F 72
	   64 65 72 2C 20
	   74 68 65 6E 20
	   64 69 73 70 6C
	   61 79 73 20 74
	   68 65 20 6E 75
	   6D 62 65 72 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 0D 0A 67 65
	   6E 65 72 61 74
	   65 64 20 76 61
	   6C 75 65 2C 20
	   73 74 61 72 74
	   69 6E 67 20 77
	   69 74 68 20 74
	   68 65 20 6C 6F
	   77 65 73 74 20
	   6E 75 6D 62 65
	   72 2E 00
				                           "original list, sorts the list, displays the median value of the list, displays the ", 13, 10,
					                       "list sorted in ascending order, then displays the number of instances of each ", 13, 10,
				                           "generated value, starting with the lowest number.", 0
 00000176 59 6F 75 72 20		prompt_1	 	BYTE   "Your unsorted random numbers:", 0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 00
 00000194 59 6F 75 72 20		prompt_2	 	BYTE   "Your sorted random numbers:", 0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 00
 000001B0  000000C8 [			randomArray     DWORD  ARRAYSIZE DUP(?) 
	    00000000
	   ]
 000004D0 54 68 65 20 6D		prompt_3	 	BYTE   "The median value of the array: ", 0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 000004F0 59 6F 75 72 20		prompt_4	 	BYTE   "Your list of instances of each generated number:", 0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 3A 00
 00000521 46 61 72 65 77		prompt_5   	 	BYTE   "Farewell, and thanks for using this program!", 0
	   65 6C 6C 2C 20
	   61 6E 64 20 74
	   68 61 6E 6B 73
	   20 66 6F 72 20
	   75 73 69 6E 67
	   20 74 68 69 73
	   20 70 72 6F 67
	   72 61 6D 21 00
 0000054E 00000000			countSize       DWORD  ?
 00000552  00000059 [			countArray      DWORD  COUNTINSTANCES DUP(?) 
	    00000000
	   ]

 00000000			.code

				; ---------------------------------------------------------------------------------
				; Name: main
				;
				; Consist of only procedure calls:
				;     introduction, fillArray, displayList, sortList, displayMedian, countList, farewell 
				;                 
				; Receives: 
				;     Data segment variables - intro_1, intro_2, LO, HI, ARRAYSIZE, randomArray, prompt_1, prompt_2, prompt_3, prompt_4
				;                              countArray, countSize, COUNTARRAYSIZE, goodbye
				; ---------------------------------------------------------------------------------
 00000000			main PROC
					
					; Calls introduction procedure, greets user and displays explanation of program
 00000000  68 00000000 R		PUSH  OFFSET intro_1
 00000005  68 0000004C R		PUSH  OFFSET intro_2
 0000000A  E8 0000009D			CALL  introduction

					; Calls fillArray, generate an array of ARRAYSIZE random numbers
 0000000F  6A 0A			PUSH  OFFSET LO 
 00000011  6A 63			PUSH  OFFSET HI
 00000013  68 000000C8			PUSH  OFFSET ARRAYSIZE
 00000018  68 000001B0 R		PUSH  OFFSET randomArray
 0000001D  E8 000000B7			CALL  fillArray 

					; Calls displayList, displays unsorted random numbers
 00000022  68 00000176 R		PUSH  OFFSET prompt_1
 00000027  68 000001B0 R		PUSH  OFFSET randomArray
 0000002C  68 000000C8			PUSH  OFFSET ARRAYSIZE
 00000031  E8 000000D5			CALL  displayList

					; Calls sortList
 00000036  68 000001B0 R		PUSH  OFFSET randomArray
 0000003B  68 000000C8			PUSH  OFFSET ARRAYSIZE
 00000040  E8 0000011B			CALL  sortList

					; Calls displayMedian 
 00000045  68 000000C8			PUSH  OFFSET ARRAYSIZE
 0000004A  68 000004D0 R		PUSH  OFFSET prompt_3
 0000004F  68 000001B0 R		PUSH  OFFSET randomArray
 00000054  E8 00000156			CALL  displayMedian

					; Calls displayList, displays sorted numbers
 00000059  68 00000194 R		PUSH  OFFSET prompt_2
 0000005E  68 000001B0 R		PUSH  OFFSET randomArray
 00000063  68 000000C8			PUSH  OFFSET ARRAYSIZE
 00000068  E8 0000009E			CALL  displayList

					; Calls countList
 0000006D  68 000001B0 R		PUSH  OFFSET randomArray
 00000072  68 00000552 R		PUSH  OFFSET countArray
 00000077  68 000000C8			PUSH  OFFSET ARRAYSIZE
 0000007C  68 0000054E R		PUSH  OFFSET countSize
 00000081  6A 0A			PUSH  OFFSET LO
 00000083  6A 63			PUSH  OFFSET HI
 00000085  E8 00000184			CALL  countList

					; Calls displayList, displays instances of each generated number
 0000008A  68 000004F0 R		PUSH  OFFSET prompt_4
 0000008F  68 00000552 R		PUSH  OFFSET countArray
 00000094  6A 5A			PUSH  OFFSET COUNTARRAYSIZE
 00000096  E8 00000070			CALL  displayList

					; Calls farewell
 0000009B  68 00000521 R		PUSH  OFFSET prompt_5
 000000A0  E8 000001B0			CALL  farewell

					Invoke ExitProcess,0	               ; exit to operating system
 000000A5  6A 00	   *	    push   +000000000h
 000000A7  E8 00000000 E   *	    call   ExitProcess
 000000AC			main ENDP

				; ---------------------------------------------------------------------------------
				; Name: introduction
				;
				; Introduces the name of the program and programmer and Displays a description of program functionality
				;
				; Preconditions: none
				;
				; Postconditions: changes registers EDX
				;                 
				; Receives: parameters: 
				;     [EBP + 12] =  intro_1    
				;     [EBP + 8]  =  intro_2
				;
				; returns: none
				; ---------------------------------------------------------------------------------
 000000AC			introduction PROC

				    ; Introduces the name of the program and programmer
 000000AC  55			    PUSH  EBP
 000000AD  8B EC			MOV   EBP, ESP
 000000AF  52				PUSH  EDX
 000000B0  8B 55 0C			MOV   EDX, [EBP + 12]
 000000B3  E8 00000000 E		CALL  WriteString
 000000B8  E8 00000000 E		CALL  CrLf
 000000BD  E8 00000000 E		CALL  CrLf

					; Displays a description of program functionalier than the number to it's right, and swaps them
 000000C2  8B 55 08		;
 000000C5  E8 00000000 E	; Preconditions: the array is type DWORD.
 000000CA  E8 00000000 E	;
 000000CF  E8 00000000 E	; Postconditions: changes registers EAX, EBX, EDX, ESI
 000000D4  5A			;                 
 000000D5  5D			; Receives: parameters: 
 000000D6  C2 0008		;     [EBP + 8]   =   array
				;     [EBP + 12]  =   position of value in the array
 000000D9			;     [EBP + 16]  =   larger number
				;     [EBP + 16]  =   smaller number
				;           
				; returns: 
				; ---------------------------------------------------------------------------------
				exchangeElements PROC
					PUSH  EBP
					MOV   EBP, ESP

					MOV   ESI, [EBP + 8]
					MOV   EDX, [EBP + 12]
					MOV   EBX, [EBP + 16]
					MOV   EAX, [EBP + 20]
					MOV   [ESI+EDX*4], EAX
					DEC   EDX
					MOV   [ESI+EDX*4], EBX 
					INC   EDX

					POP   EBP 
 000000D9				RET   16
 000000D9  55			exchangeElements ENDP
 000000DA  8B EC
				; ---------------------------------------------------------------------------------
				; Name: 
 000000DC  8B 4D 0C		;
 000000DF  8B 7D 08		; Description HERE 
 000000E2  E8 00000000 E	;
 000000E7  BB 00000000		; Preconditions: the array is type DWORD.
 000000EC			;
 000000EC  8B 45 10		; Postconditions: changes registers EAX, EBX, ECX, EDX, ESI, EDI
 000000EF  83 C0 01		;                 
 000000F2  E8 00000000 E	;
 000000F7  3B 45 14		; Receives: parameters: 
 000000FA  7C F0		;     [EBP + 8]   =   size of array
 000000FC  89 07		;     [EBP + 12]  =   array
 000000FE  83 C7 04		;     [EBP + 16]  =   display message regarding the array
 00000101  43			;           
 00000102  E2 E8		;
				; returns: 
				; ---------------------------------------------------------------------------------
 00000104  89 7D 08		displayMedian PROC
 00000107  5D				PUSH  EBP
 00000108  C2 0010			MOV   EBP, ESP

 0000010B				; Display text regarding median 
					MOV   EDX, [EBP + 12]
					CALL  WriteString

					; Determin if the size of the array is even or odd
					; By dividing the array size by 2 and looking if there is a remainder
					MOV   EAX, [EBP + 16]                  ; ARRAYSIZE
					MOV   EDX, 0
				    MOV   EBX, 2
					DIV   EBX 
					CMP   EDX, 0 
					JE    _isEven
					JMP   _isOdd
				_isEven: 
					; Check to see if middle 2 values are the same
					MOV   EDX, EAX 
					DEC   EDX
					MOV   EAX, [ESI+EDX*4]
 0000010B				INC   EDX
 0000010B  55				MOV   EBX, [ESI+EDX*4]
 0000010C  8B EC			CMP   EAX, EBX
					JE    _displayResults

 0000010E  8B 55 10			; Add the middle 2 arrays and divide by 2
 00000111  E8 00000000 E		ADD   EAX, EBX 
 00000116  E8 00000000 E		MOV   EDX, 0 
					MOV   EBX, 2
					DIV   EBX 
 0000011B  8B 75 0C			CMP   EDX, 0
 0000011E  BA 00000001			JNE   _roundUp
 00000123  4A				JMP   _displayResults
 00000124  BB 00000000		_roundUp: 
 00000129				INC   EAX 
 00000129  8B C3			JMP   _displayResults
 0000012B  83 F8 14
 0000012E  7D 02		_isOdd: 
 00000130  EB 0A			MOV   EDX, EAX
 00000132				MOV   EAX, [ESI+EDX*4]
 00000132  E8 00000000 E
 00000137  BB 00000000		_displayResults: 
 0000013C				CALL  WriteDec 
 0000013C  8B 04 96			CALL  CrLf
 0000013F  E8 00000000 E		CALL  CrLf
 00000144  B0 20			POP   EBP 
 00000146  E8 00000000 E		RET   12
 0000014B  43
 0000014C  42			displayMedian ENDP
 0000014D  3B 55 08
 00000150  7C D7		; ---------------------------------------------------------------------------------
 00000152  E8 00000000 E	; Name: 
 00000157  E8 00000000 E	;
 0000015C  5D			; Description HERE 
 0000015D  C2 000C		;
				; Preconditions: the array is type DWORD.
 00000160			;
				; Postconditions: changes registers EAX, EBX, ECX, EDX, ESI, EDI
				;                 
				;
				; Receives: parameters: 
				;     [EBP + 8]   =   size of array
				;     [EBP + 12]  =   array
				;     [EBP + 16]  =   display message regarding the array
				;           
				;
				; returns: 
				; ---------------------------------------------------------------------------------
				countList PROC
					PUSH  EBP
					MOV   EBP, ESP

					; Update countSize 
 00000160				MOV   EBX, [EBP + 12]    ; low
 00000160  55				MOV   EAX, [EBP + 8]     ; hi
 00000161  8B EC			SUB   EAX, EBX
					MOV   [EBP + 16], EAX    ; save countSize

 00000163  8B 75 0C			; Count how many of each number there are
 00000166  8B 4D 08			MOV   ESI, [EBP + 28]    ; randomArray
					MOV   EDI, [EBP + 24]    ; countArray
 00000169				MOV   EAX, [EBP + 12]    ; lo 
 00000169  49				MOV   ECX, [EBP + 20]    ; ARRAYSIZE
 0000016A  51				MOV   EBX, 0             ; occurance counter 
 0000016B  BA 00000000
 00000170			_LoopCount:  
 00000170  8B 04 96			CMP   EAX, [ESI]
 00000173  42				JE    _addOne
 00000174  8B 1C 96			JMP   _magical
 00000177  3B C3		_addOne:
 00000179  7F 02			INC   EBX 
 0000017B  EB 0B		_magical: 
					ADD   ESI, 4
 0000017D				LOOP  _LoopCount
					JMP   _recordCounter
 0000017D  50
 0000017E  53			_recordCounter:
 0000017F  52				MOV   [EDI], EBX         ; adds new count to countArray
 00000180  56				MOV   ESI, [EBP + 28]    ; randomArray
 00000181  E8 0000000E			ADD   EDI, 4 
 00000186  EB 00			INC   EAX
					MOV   ECX, [EBP + 20]    ; ARRAYSIZE
 00000188				MOV   EBX, 0 
 00000188  E2 E6			CMP   EAX, [EBP + 8]
 0000018A  59				JLE   _LoopCount
 0000018B  83 F9 02
 0000018E  7D D9			POP   EBP 
 00000190  5D				RET   24
 00000191  C2 0008
				countList ENDP
 00000194
				; ---------------------------------------------------------------------------------
				; Name: farewell
				;
				; Say goodbye by displaying a parting message 
				;
				; Receives:  
				;     [ebp+8] = prompt_5
				; ---------------------------------------------------------------------------------
				farewell PROC
					PUSH  EBP
					MOV   EBP, ESP

					MOV   EDX, [EBP + 8]
					CALL  WriteString
					CALL  CrLf

					POP   EBP 
					RET   4
 00000194			farewell ENDP
 00000194  55
 00000195  8B EC		END main er than the number to it's right, and swaps them
				;
 00000197  8B 75 08		; Preconditions: the array is type DWORD.
 0000019A  8B 55 0C		;
 0000019D  8B 5D 10		; Postconditions: changes registers EAX, EBX, EDX, ESI
 000001A0  8B 45 14		;                 
 000001A3  89 04 96		; Receives: parameters: 
 000001A6  4A			;     [EBP + 8]   =   array
 000001A7  89 1C 96		;     [EBP + 12]  =   position of value in the array
 000001AA  42			;     [EBP + 16]  =   larger number
				;     [EBP + 16]  =   smaller number
 000001AB  5D			;           
 000001AC  C2 0010		; returns: 
 000001AF			; ---------------------------------------------------------------------------------
				exchangeElements PROC
					PUSH  EBP
					MOV   EBP, ESP

					MOV   ESI, [EBP + 8]
					MOV   EDX, [EBP + 12]
					MOV   EBX, [EBP + 16]
					MOV   EAX, [EBP + 20]
					MOV   [ESI+EDX*4], EAX
					DEC   EDX
					MOV   [ESI+EDX*4], EBX 
					INC   EDX

					POP   EBP 
					RET   16
				exchangeElements ENDP

				; ---------------------------------------------------------------------------------
				; Name: 
 000001AF			;
 000001AF  55			; Description HERE 
 000001B0  8B EC		;
				; Preconditions: the array is type DWORD.
				;
 000001B2  8B 55 0C		; Postconditions: changes registers EAX, EBX, ECX, EDX, ESI, EDI
 000001B5  E8 00000000 E	;                 
				;
				; Receives: parameters: 
				;     [EBP + 8]   =   size of array
 000001BA  8B 45 10		;     [EBP + 12]  =   array
 000001BD  BA 00000000		;     [EBP + 16]  =   display message regarding the array
 000001C2  BB 00000002		;           
 000001C7  F7 F3		;
 000001C9  83 FA 00		; returns: 
 000001CC  74 02		; ---------------------------------------------------------------------------------
 000001CE  EB 26		displayMedian PROC
 000001D0				PUSH  EBP
					MOV   EBP, ESP
 000001D0  8B D0
 000001D2  4A				; Display text regarding median 
 000001D3  8B 04 96			MOV   EDX, [EBP + 12]
 000001D6  42				CALL  WriteString
 000001D7  8B 1C 96
 000001DA  3B C3			; Determin if the size of the array is even or odd
 000001DC  74 1D			; By dividing the array size by 2 and looking if there is a remainder
					MOV   EAX, [EBP + 16]                  ; ARRAYSIZE
					MOV   EDX, 0
 000001DE  03 C3		    MOV   EBX, 2
 000001E0  BA 00000000			DIV   EBX 
 000001E5  BB 00000002			CMP   EDX, 0 
 000001EA  F7 F3			JE    _isEven
 000001EC  83 FA 00			JMP   _isOdd
 000001EF  75 02		_isEven: 
 000001F1  EB 08			; Check to see if middle 2 values are the same
 000001F3				MOV   EDX, EAX 
 000001F3  40				DEC   EDX
 000001F4  EB 05			MOV   EAX, [ESI+EDX*4]
					INC   EDX
 000001F6				MOV   EBX, [ESI+EDX*4]
 000001F6  8B D0			CMP   EAX, EBX
 000001F8  8B 04 96			JE    _displayResults

 000001FB				; Add the middle 2 arrays and divide by 2
 000001FB  E8 00000000 E		ADD   EAX, EBX 
 00000200  E8 00000000 E		MOV   EDX, 0 
 00000205  E8 00000000 E		MOV   EBX, 2
 0000020A  5D				DIV   EBX 
 0000020B  C2 000C			CMP   EDX, 0
					JNE   _roundUp
 0000020E				JMP   _displayResults
				_roundUp: 
					INC   EAX 
					JMP   _displayResults

				_isOdd: 
					MOV   EDX, EAX
					MOV   EAX, [ESI+EDX*4]

				_displayResults: 
					CALL  WriteDec 
					CALL  CrLf
					CALL  CrLf
					POP   EBP 
					RET   12

				displayMedian ENDP

				; ---------------------------------------------------------------------------------
				; Name: 
 0000020E			;
 0000020E  55			; Description HERE 
 0000020F  8B EC		;
				; Preconditions: the array is type DWORD.
				;
 00000211  8B 5D 0C		; Postconditions: changes registers EAX, EBX, ECX, EDX, ESI, EDI
 00000214  8B 45 08		;                 
 00000217  2B C3		;
 00000219  89 45 10		; Receives: parameters: 
				;     [EBP + 8]   =   size of array
				;     [EBP + 12]  =   array
 0000021C  8B 75 1C		;     [EBP + 16]  =   display message regarding the array
 0000021F  8B 7D 18		;           
 00000222  8B 45 0C		;
 00000225  8B 4D 14		; returns: 
 00000228  BB 00000000		; ---------------------------------------------------------------------------------
				countList PROC
 0000022D				PUSH  EBP
 0000022D  3B 06			MOV   EBP, ESP
 0000022F  74 02
 00000231  EB 01			; Update countSize 
 00000233				MOV   EBX, [EBP + 12]    ; low
 00000233  43				MOV   EAX, [EBP + 8]     ; hi
 00000234				SUB   EAX, EBX
 00000234  83 C6 04			MOV   [EBP + 16], EAX    ; save countSize
 00000237  E2 F4
 00000239  EB 00			; Count how many of each number there are
					MOV   ESI, [EBP + 28]    ; randomArray
 0000023B				MOV   EDI, [EBP + 24]    ; countArray
 0000023B  89 1F			MOV   EAX, [EBP + 12]    ; lo 
 0000023D  8B 75 1C			MOV   ECX, [EBP + 20]    ; ARRAYSIZE
 00000240  83 C7 04			MOV   EBX, 0             ; occurance counter 
 00000243  40
 00000244  8B 4D 14		_LoopCount:  
 00000247  BB 00000000			CMP   EAX, [ESI]
 0000024C  3B 45 08			JE    _addOne
 0000024F  7E DC			JMP   _magical
				_addOne:
 00000251  5D				INC   EBX 
 00000252  C2 0018		_magical: 
					ADD   ESI, 4
 00000255				LOOP  _LoopCount
					JMP   _recordCounter

				_recordCounter:
					MOV   [EDI], EBX         ; adds new count to countArray
					MOV   ESI, [EBP + 28]    ; randomArray
					ADD   EDI, 4 
					INC   EAX
					MOV   ECX, [EBP + 20]    ; ARRAYSIZE
					MOV   EBX, 0 
 00000255				CMP   EAX, [EBP + 8]
 00000255  55				JLE   _LoopCount
 00000256  8B EC
					POP   EBP 
 00000258  8B 55 08			RET   24
 0000025B  E8 00000000 E
 00000260  E8 00000000 E	countList ENDP

 00000265  5D			; ---------------------------------------------------------------------------------
 00000266  C2 0004		; Name: farewell
 00000269			;
				; Say goodbye by displaying a parting message 
				;
				; Receives:  
Microsoft (R) Macro Assembler Version 14.28.29335.0	    02/28/21 19:48:02
<Generating Sorting Counting Random Integers    (RandomInteg  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000006B6 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000269 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 0000020E _TEXT	Length= 00000047 Public STDCALL
  _LoopCount . . . . . . . . . .	L Near	 0000022D _TEXT	
  _addOne  . . . . . . . . . . .	L Near	 00000233 _TEXT	
  _magical . . . . . . . . . . .	L Near	 00000234 _TEXT	
  _recordCounter . . . . . . . .	L Near	 0000023B _TEXT	
displayList  . . . . . . . . . .	P Near	 0000010B _TEXT	Length= 00000055 Public STDCALL
  _showElement . . . . . . . . .	L Near	 00000129 _TEXT	
  _twentyPerLine . . . . . . . .	L Near	 00000132 _TEXT	
  _continue  . . . . . . . . . .	L Near	 0000013C _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001AF _TEXT	Length= 0000005F Public STDCALL
  _isEven  . . . . . . . . . . .	L Near	 000001D0 _TEXT	
  _roundUp . . . . . . . . . . .	L Near	 000001F3 _TEXT	
  _isOdd . . . . . . . . . . . .	L Near	 000001F6 _TEXT	
  _displayResults  . . . . . . .	L Near	 000001FB _TEXT	
exchangeElements . . . . . . . .	P Near	 00000194 _TEXT	Length= 0000001B Public STDCALL
farewell . . . . . . . . . . . .	P Near	 00000255 _TEXT	Length= 00000014 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000D9 _TEXT	Length= 00000032 Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 000000EC _TEXT	
introduction . . . . . . . . . .	P Near	 000000AC _TEXT	Length= 0000002D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AC Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000160 _TEXT	Length= 00000034 Public STDCALL
  _outerLoop . . . . . . . . . .	L Near	 00000169 _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 00000170 _TEXT	
  _exchange  . . . . . . . . . .	L Near	 0000017D _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 00000188 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNTARRAYSIZE . . . . . . . . .	Number	 0000005Ah   
COUNTINSTANCES . . . . . . . . .	Number	 00000059h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000063h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Ah   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countArray . . . . . . . . . . .	DWord	 00000552 _DATA	
countSize  . . . . . . . . . . .	DWord	 0000054E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 0000004C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prompt_1 . . . . . . . . . . . .	Byte	 00000176 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 00000194 _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 000004D0 _DATA	
prompt_4 . . . . . . . . . . . .	Byte	 000004F0 _DATA	
prompt_5 . . . . . . . . . . . .	Byte	 00000521 _DATA	
randomArray  . . . . . . . . . .	DWord	 000001B0 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
