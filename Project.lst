Microsoft (R) Macro Assembler Version 14.28.29335.0	    02/28/21 16:13:35
<Generating Sorting Counting Random Integers    (RandomInteg  Page 1 - 1


				TITLE Generating Sorting Counting Random Integers    (RandomIntegers.asm)

				; Author: Shimey Loo
				; Last Modified: February 28, 2021
				; OSU email address: LOOSH@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: Project 5       Due Date:  February 28, 2021
				; Description: test


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

				    ; constant values
 = 00000001				LO = 1
 = 00000005				HI = 5
 = 00000005				ARRAYSIZE = 5
 = 00000005				COUNTARRAYSIZE = HI - LO + 1


 00000000			.data

 00000000 47 65 6E 65 72	    intro_1	 	    BYTE   "Generating, Sorting, and Counting Random integers! Programmed by Shimey Loo", 0
	   61 74 69 6E 67
	   2C 20 53 6F 72
	   74 69 6E 67 2C
	   20 61 6E 64 20
	   43 6F 75 6E 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 69 6E 74 65
	   67 65 72 73 21
	   20 50 72 6F 67
	   72 61 6D 6D 65
	   64 20 62 79 20
	   53 68 69 6D 65
	   79 20 4C 6F 6F
	   00
 0000004C 54 68 69 73 20		intro_2	 	    BYTE   "This program generates 200 random numbers in the range [10 ... 29], displays the", 13, 10,
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 20 69 6E 20
	   74 68 65 20 72
	   61 6E 67 65 20
	   5B 31 30 20 2E
	   2E 2E 20 32 39
	   5D 2C 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   0D 0A 6F 72 69
	   67 69 6E 61 6C
	   20 6C 69 73 74
	   2C 20 73 6F 72
	   74 73 20 74 68
	   65 20 6C 69 73
	   74 2C 20 64 69
	   73 70 6C 61 79
	   73 20 74 68 65
	   20 6D 65 64 69
	   61 6E 20 76 61
	   6C 75 65 20 6F
	   66 20 74 68 65
	   20 6C 69 73 74
	   2C 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   0D 0A 6C 69 73
	   74 20 73 6F 72
	   74 65 64 20 69
	   6E 20 61 73 63
	   65 6E 64 69 6E
	   67 20 6F 72 64
	   65 72 2C 20 74
	   68 65 6E 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 69 6E 73
	   74 61 6E 63 65
	   73 20 6F 66 20
	   65 61 63 68 20
	   0D 0A 67 65 6E
	   65 72 61 74 65
	   64 20 76 61 6C
	   75 65 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 31 30 73
	   2E 00
				                           "original list, sorts the list, displays the median value of the list, displays the ", 13, 10,
					                       "list sorted in ascending order, then displays the number of instances of each ", 13, 10,
				                           "generated value, starting with the number of 10s.", 0
 00000175 59 6F 75 72 20		prompt_1	 	BYTE   "Your unsorted random numbers:", 0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 00
 00000193 59 6F 75 72 20		prompt_2	 	BYTE   "Your sorted random numbers:", 0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 00
 000001AF  00000005 [			randomArray     DWORD  ARRAYSIZE DUP(?) 
	    00000000
	   ]
 000001C3 54 68 65 20 6D		prompt_3	 	BYTE   "The median value of the array: ", 0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 000001E3 59 6F 75 72 20		prompt_4	 	BYTE   "Your list of instances of each generated number:", 0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 3A 00
 00000214 00000000			countSize       DWORD  ?
 00000218  00000004 [			countArray      DWORD  (HI - LO) DUP(?) 
	    00000000
	   ]


 00000000			.code
 00000000			main PROC
					
					; Calls introduction procedure, greets user and displays explanation of program
 00000000  68 00000000 R		PUSH  OFFSET intro_1
 00000005  68 0000004C R		PUSH  OFFSET intro_2
 0000000A  E8 00000081			CALL  introduction

					; Calls fillArray, generate an array of ARRAYSIZE random numbers
 0000000F  6A 01			PUSH  OFFSET LO 
 00000011  6A 05			PUSH  OFFSET HI
 00000013  6A 05			PUSH  OFFSET ARRAYSIZE
 00000015  68 000001AF R		PUSH  OFFSET randomArray
 0000001A  E8 0000009E			CALL  fillArray 

					; Calls displayList, displays unsorted random numbers
 0000001F  68 00000175 R		PUSH  OFFSET prompt_1
 00000024  68 000001AF R		PUSH  OFFSET randomArray
 00000029  6A 05			PUSH  OFFSET ARRAYSIZE
 0000002B  E8 000000BA			CALL  displayList

					; Calls sortList
 00000030  68 000001AF R		PUSH  OFFSET randomArray
 00000035  6A 05			PUSH  OFFSET ARRAYSIZE
 00000037  E8 00000103			CALL  sortList

					; Calls displayMedian 
 0000003C  6A 05			PUSH  OFFSET ARRAYSIZE
 0000003E  68 000001C3 R		PUSH  OFFSET prompt_3
 00000043  68 000001AF R		PUSH  OFFSET randomArray
 00000048  E8 00000143			CALL  displayMedian

					; Calls displayList, displays sorted numbers
 0000004D  68 00000193 R		PUSH  OFFSET prompt_2
 00000052  68 000001AF R		PUSH  OFFSET randomArray
 00000057  6A 05			PUSH  OFFSET ARRAYSIZE
 00000059  E8 0000008C			CALL  displayList

					; Calls countList
 0000005E  68 000001AF R		PUSH  OFFSET randomArray
 00000063  68 00000218 R		PUSH  OFFSET countArray
 00000068  6A 05			PUSH  OFFSET ARRAYSIZE
 0000006A  68 00000214 R		PUSH  OFFSET countSize
 0000006F  6A 01			PUSH  OFFSET LO
 00000071  6A 05			PUSH  OFFSET HI
 00000073  E8 00000172			CALL  countList

					; Calls displayList, displays instances of each generated number
 00000078  68 000001E3 R		PUSH  OFFSET prompt_4
 0000007D  68 00000218 R		PUSH  OFFSET countArray
 00000082  6A 05			PUSH  OFFSET COUNTARRAYSIZE
 00000084  E8 00000061			CALL  displayList

					Invoke ExitProcess,0	               ; exit to operating system
 00000089  6A 00	   *	    push   +000000000h
 0000008B  E8 00000000 E   *	    call   ExitProcess
 00000090			main ENDP

 00000090			introduction PROC

				    ; Introduces the name of the program and programmer
 00000090  55			    PUSH  EBP
 00000091  8B EC			MOV   EBP, ESP
 00000093  52				PUSH  EDX
 00000094  8B 55 0C			MOV   EDX, [EBP + 12]
 00000097  E8 00000000 E		CALL  WriteString
 0000009C  E8 00000000 E		CALL  CrLf
 000000A1  E8 00000000 E		CALL  CrLf

					; Displays a description of program functionality
 000000A6  8B 55 08			MOV   EDX, [EBP + 8]
 000000A9  E8 00000000 E		CALL  WriteString
 000000AE  E8 00000000 E		CALL  CrLf
 000000B3  E8 00000000 E		CALL  CrLf
 000000B8  5A				POP   EDX
 000000B9  5D				POP   EBP
 000000BA  C2 0008			RET   8

 000000BD			introduction ENDP

 000000BD			fillArray PROC 
 000000BD  55				PUSH  EBP
 000000BE  8B EC			MOV   EBP, ESP

					; generates random number
 000000C0  8B 4D 0C			MOV   ECX, [EBP + 12]                  ; ARRAYSIZE
 000000C3  8B 7D 08			MOV   EDI, [EBP + 8]                   ; address of array in EDI 
				    ;CALL  Randomize                        ; Sets seed
 000000C6  BB 00000000			MOV   EBX, 0 
 000000CB			_fillLoop: 
 000000CB  8B 45 10			MOV   EAX, [EBP + 16]                  ; upper range (HI)
 000000CE  83 C0 01			ADD   EAX, 1
 000000D1  E8 00000000 E		CALL  RandomRange 
 000000D6  3B 45 14			CMP   EAX, [EBP + 20]                  ; checks if generated number is less than LO
 000000D9  7C F0			JL    _fillLoop
 000000DB  89 07			MOV   [EDI], EAX                       ; adds new num to randomArray
 000000DD  83 C7 04			ADD   EDI, 4 
 000000E0  43				INC   EBX 
 000000E1  E2 E8			LOOP  _fillLoop

					; saves list of random numbers 
 000000E3  89 7D 08			MOV   [EBP + 8], EDI 
 000000E6  5D				POP   EBP 
 000000E7  C2 0010			RET   16

 000000EA			fillArray ENDP 

 000000EA			displayList PROC 
 000000EA  55				PUSH  EBP
 000000EB  8B EC			MOV   EBP, ESP

					; Display text regarding list
 000000ED  8B 55 10			MOV   EDX, [EBP + 16]
 000000F0  E8 00000000 E		CALL  WriteString
 000000F5  E8 00000000 E		CALL  CrLf

					; Displays list 
 000000FA  8B 75 0C			MOV   ESI, [EBP + 12]                  ; randomArray
 000000FD  BA 00000001			MOV   EDX, 1   
 00000102  4A				DEC   EDX 
 00000103  BB 00000000			MOV   EBX, 0
 00000108			_showElement:
 00000108  8B C3			MOV   EAX, EBX 
 0000010A  83 F8 14			CMP   EAX, 20
 0000010D  7D 02			JGE   _twentyPerLine               
 0000010F  EB 0A			JMP   _continue
 00000111			_twentyPerLine: 
 00000111  E8 00000000 E		CALL  CrLf                             ; creates a new line when 20 values have been displayed 
 00000116  BB 00000000			MOV   EBX, 0
 0000011B			_continue:
 0000011B  8B 04 96			MOV   EAX,[ESI+EDX*4]          
 0000011E  E8 00000000 E		CALL  WriteDec                 
 00000123  B0 20			MOV   AL,32
 00000125  E8 00000000 E		CALL  WriteChar
 0000012A  43				INC   EBX
 0000012B  42			    INC   EDX
 0000012C  3B 55 08			CMP   EDX, [EBP + 8]                   ; ARRAYSIZE
 0000012F  7C D7			JL    _showElement
 00000131  E8 00000000 E		CALL  CrLf
 00000136  E8 00000000 E		CALL  CrLf
 0000013B  5D				POP   EBP
 0000013C  C2 000C			RET   12

 0000013F			displayList ENDP 

 0000013F			sortList PROC
 0000013F  55				PUSH  EBP
 00000140  8B EC			MOV   EBP, ESP

					; Sort the array
 00000142  8B 75 0C			MOV   ESI, [EBP + 12]             ; randomArray
 00000145  8B 4D 08			MOV   ECX, [EBP + 8]              ; ARRAYSIZE
 00000148  49				DEC   ECX
					
 00000149			_outerLoop:
 00000149  BA 00000000			MOV   EDX, 0
 0000014E  49				DEC   ECX
 0000014F  51				PUSH  ECX
 00000150  41				INC   ECX
 00000151			  _innerLoop: 
 00000151  8B 04 96			MOV   EAX, [ESI+EDX*4]            ; previous 
 00000154  42				INC   EDX 
 00000155  8B 1C 96			MOV   EBX, [ESI+EDX*4]            ; current 
 00000158  3B C3			CMP   EAX, EBX 
 0000015A  7F 02			JG    _exchange
 0000015C  EB 0B			JMP   _loop
 0000015E			  _exchange: 
					; call exchangeElements
 0000015E  50				PUSH  EAX
 0000015F  53				PUSH  EBX
 00000160  52				PUSH  EDX 
 00000161  56				PUSH  ESI
 00000162  E8 0000000E			CALL  exchangeElements
 00000167  EB 00			JMP   _loop
 00000169			  _loop: 
 00000169  E2 E6			LOOP  _innerLoop
 0000016B  59				POP   ECX  
 0000016C  83 F9 02			CMP   ECX, 2
 0000016F  7F D8			JG    _outerLoop  
 00000171  5D				POP   EBP 
 00000172  C2 0008			RET   8

 00000175			sortList ENDP

 00000175			exchangeElements PROC
 00000175  55				PUSH  EBP
 00000176  8B EC			MOV   EBP, ESP

 00000178  8B 75 08			MOV   ESI, [EBP + 8]
 0000017B  8B 55 0C			MOV   EDX, [EBP + 12]
 0000017E  8B 5D 10			MOV   EBX, [EBP + 16]
 00000181  8B 45 14			MOV   EAX, [EBP + 20]
 00000184  89 04 96			MOV   [ESI+EDX*4], EAX
 00000187  4A				DEC   EDX
 00000188  89 1C 96			MOV   [ESI+EDX*4], EBX 
 0000018B  42				INC   EDX

 0000018C  5D				POP   EBP 
 0000018D  C2 0010			RET   16
 00000190			exchangeElements ENDP

 00000190			displayMedian PROC
 00000190  55				PUSH  EBP
 00000191  8B EC			MOV   EBP, ESP

					; Display text regarding median 
 00000193  8B 55 0C			MOV   EDX, [EBP + 12]
 00000196  E8 00000000 E		CALL  WriteString

					; Determin if the size of the array is even or odd
					; By dividing the array size by 2 and looking if there is a remainder
 0000019B  8B 45 10			MOV   EAX, [EBP + 16]                  ; ARRAYSIZE
 0000019E  BA 00000000			MOV   EDX, 0
 000001A3  BB 00000002		    MOV   EBX, 2
 000001A8  F7 F3			DIV   EBX 
 000001AA  83 FA 00			CMP   EDX, 0 
 000001AD  74 02			JE    _isEven
 000001AF  EB 26			JMP   _displayResults
 000001B1			_isEven: 
					; Check to see if middle 2 values are the same
 000001B1  8B D0			MOV   EDX, EAX 
 000001B3  4A				DEC   EDX
 000001B4  8B 04 96			MOV   EAX, [ESI+EDX*4]
 000001B7  42				INC   EDX
 000001B8  8B 1C 96			MOV   EBX, [ESI+EDX*4]
 000001BB  3B C3			CMP   EAX, EBX
 000001BD  74 18			JE    _displayResults

					; Add the middle 2 arrays and divide by 2
 000001BF  03 C3			ADD   EAX, EBX 
 000001C1  BA 00000000			MOV   EDX, 0 
 000001C6  BB 00000002			MOV   EBX, 2
 000001CB  F7 F3			DIV   EBX 
 000001CD  83 FA 00			CMP   EDX, 0
 000001D0  75 02			JNE   _roundUp
 000001D2  EB 03			JMP   _displayResults
 000001D4			_roundUp: 
 000001D4  40				INC   EAX 
 000001D5  EB 00			JMP   _displayResults

 000001D7			_displayResults: 
 000001D7  E8 00000000 E		CALL  WriteDec 
 000001DC  E8 00000000 E		CALL  CrLf
 000001E1  E8 00000000 E		CALL  CrLf
 000001E6  5D				POP   EBP 
 000001E7  C2 000C			RET   12

 000001EA			displayMedian ENDP

 000001EA			countList PROC
 000001EA  55				PUSH  EBP
 000001EB  8B EC			MOV   EBP, ESP

					; Update countSize 
 000001ED  8B 5D 0C			MOV   EBX, [EBP + 12]    ; low
 000001F0  8B 45 08			MOV   EAX, [EBP + 8]     ; hi
 000001F3  2B C3			SUB   EAX, EBX
 000001F5  89 45 10			MOV   [EBP + 16], EAX    ; save countSize

					; Count how many of each number there are
 000001F8  8B 75 1C			MOV   ESI, [EBP + 28]    ; randomArray
 000001FB  8B 7D 18			MOV   EDI, [EBP + 24]    ; countArray
 000001FE  8B 45 0C			MOV   EAX, [EBP + 12]    ; lo 
 00000201  8B 4D 14			MOV   ECX, [EBP + 20]    ; ARRAYSIZE
 00000204  BB 00000000			MOV   EBX, 0             ; occurance counter 

 00000209			_LoopCount:  
 00000209  3B 06			CMP   EAX, [ESI]
 0000020B  74 02			JE    _addOne
 0000020D  EB 01			JMP   _magical
 0000020F			_addOne:
 0000020F  43				INC   EBX 
 00000210			_magical: 
 00000210  83 C6 04			ADD   ESI, 4
 00000213  E2 F4			LOOP  _LoopCount
 00000215  EB 00			JMP   _recordCounter

 00000217			_recordCounter:
 00000217  89 1F			MOV   [EDI], EBX         ; adds new count to countArray
 00000219  8B 75 1C			MOV   ESI, [EBP + 28]    ; randomArray
 0000021C  83 C7 04			ADD   EDI, 4 
 0000021F  40				INC   EAX
 00000220  8B 4D 14			MOV   ECX, [EBP + 20]    ; ARRAYSIZE
 00000223  BB 00000000			MOV   EBX, 0 
 00000228  3B 45 08			CMP   EAX, [EBP + 8]
 0000022B  7E DC			JLE   _LoopCount

 0000022D  5D				POP   EBP 
 0000022E  C2 0018			RET   24

 00000231			countList ENDP

 00000231			countListPRAC PROC
 00000231  55				PUSH  EBP
 00000232  8B EC			MOV   EBP, ESP

					; Update countSize 
 00000234  8B 5D 0C			MOV   EBX, [EBP + 12]    ; low
 00000237  8B 45 08			MOV   EAX, [EBP + 8]     ; hi
 0000023A  2B C3			SUB   EAX, EBX
 0000023C  89 45 10			MOV   [EBP + 16], EAX    ; save countSize

					; Count how many of each number there are
 0000023F  8B 75 1C			MOV   ESI, [EBP + 28]    ; randomArray
 00000242  8B 7D 18			MOV   EDI, [EBP + 24]    ; countArray
 00000245  BA 00000000			MOV   EDX, 0             ; position

 0000024A			_outerLoopCount: 
 0000024A  B9 00000001			MOV   ECX, 1

 0000024F			_innerLoopCount: 
 0000024F  8B 04 96			MOV   EAX, [ESI+EDX*4]   ; current
 00000252  42				INC   EDX
					
					; checks if it is the end
 00000253  51				PUSH  ECX                
 00000254  8B 4D 14			MOV   ECX, [EBP + 20]    ; ARRAYSIZE
 00000257  3B CA			CMP   ECX, EDX 
 00000259  59				POP   ECX
 0000025A  7E 15			JLE   _end 
 0000025C  EB 00			JMP   _notEnd

 0000025E			_notEnd: 
				; check if the next value is same/different from current value
 0000025E  8B 1C 96			MOV   EBX, [ESI+EDX*4]   ; next
 00000261  3B C3			CMP   EAX, EBX 
 00000263  74 02			JE    _same
 00000265  EB 03			JMP   _different
 00000267			_same:
 00000267  41				INC   ECX
 00000268  EB E5			JMP   _innerLoopCount

 0000026A			_different: 
 0000026A  89 0F			MOV   [EDI], ECX         ; adds new count to countArray
 0000026C  83 C7 04			ADD   EDI, 4 
 0000026F  EB D9			JMP   _outerLoopCount
					
 00000271			_end: 
 00000271  89 0F			MOV   [EDI], ECX         ; adds last count to countArray
 00000273  5D				POP   EBP 
 00000274  C3				RET   

 00000275			countListPRAC ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    02/28/21 16:13:35
<Generating Sorting Counting Random Integers    (RandomInteg  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000228 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000275 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countListPRAC  . . . . . . . . .	P Near	 00000231 _TEXT	Length= 00000044 Public STDCALL
  _outerLoopCount  . . . . . . .	L Near	 0000024A _TEXT	
  _innerLoopCount  . . . . . . .	L Near	 0000024F _TEXT	
  _notEnd  . . . . . . . . . . .	L Near	 0000025E _TEXT	
  _same  . . . . . . . . . . . .	L Near	 00000267 _TEXT	
  _different . . . . . . . . . .	L Near	 0000026A _TEXT	
  _end . . . . . . . . . . . . .	L Near	 00000271 _TEXT	
countList  . . . . . . . . . . .	P Near	 000001EA _TEXT	Length= 00000047 Public STDCALL
  _LoopCount . . . . . . . . . .	L Near	 00000209 _TEXT	
  _addOne  . . . . . . . . . . .	L Near	 0000020F _TEXT	
  _magical . . . . . . . . . . .	L Near	 00000210 _TEXT	
  _recordCounter . . . . . . . .	L Near	 00000217 _TEXT	
displayList  . . . . . . . . . .	P Near	 000000EA _TEXT	Length= 00000055 Public STDCALL
  _showElement . . . . . . . . .	L Near	 00000108 _TEXT	
  _twentyPerLine . . . . . . . .	L Near	 00000111 _TEXT	
  _continue  . . . . . . . . . .	L Near	 0000011B _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000190 _TEXT	Length= 0000005A Public STDCALL
  _isEven  . . . . . . . . . . .	L Near	 000001B1 _TEXT	
  _roundUp . . . . . . . . . . .	L Near	 000001D4 _TEXT	
  _displayResults  . . . . . . .	L Near	 000001D7 _TEXT	
exchangeElements . . . . . . . .	P Near	 00000175 _TEXT	Length= 0000001B Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000BD _TEXT	Length= 0000002D Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 000000CB _TEXT	
introduction . . . . . . . . . .	P Near	 00000090 _TEXT	Length= 0000002D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000090 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 0000013F _TEXT	Length= 00000036 Public STDCALL
  _outerLoop . . . . . . . . . .	L Near	 00000149 _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 00000151 _TEXT	
  _exchange  . . . . . . . . . .	L Near	 0000015E _TEXT	
  _loop  . . . . . . . . . . . .	L Near	 00000169 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 00000005h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
COUNTARRAYSIZE . . . . . . . . .	Number	 00000005h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000005h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000001h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countArray . . . . . . . . . . .	DWord	 00000218 _DATA	
countSize  . . . . . . . . . . .	DWord	 00000214 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_1  . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro_2  . . . . . . . . . . . .	Byte	 0000004C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prompt_1 . . . . . . . . . . . .	Byte	 00000175 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 00000193 _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 000001C3 _DATA	
prompt_4 . . . . . . . . . . . .	Byte	 000001E3 _DATA	
randomArray  . . . . . . . . . .	DWord	 000001AF _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
